--- Makefile_orig       2016-09-03 17:31:33.471530418 +0200
+++ Makefile    2016-09-03 17:31:42.435620593 +0200
@@ -3,7 +3,7 @@
 #CFLAGS += -DDK_DEBUG -DDK_HASH_BUFF -Wall
 #CFLAGS += -DUNIXWARE
 INCS=-I.
-LIBS=-L. -ldomainkeys -lcrypto
+LIBS=-L. -ldomainkeys -lcrypto -lresolv
 MAKE=make
 
 dktest: dktest.o libdomainkeys.a dns.lib socket.lib

--- domainkeys.c.orig   2017-01-08 20:10:54.935802987 +0100
+++ domainkeys.c        2017-01-08 20:11:05.203994670 +0100
@@ -120,7 +120,7 @@
 {
 /* STARTPRIV */
   int dkmarker;     /* in case somebody casts in */
-  EVP_MD_CTX mdctx;   /* the hash */
+  EVP_MD_CTX *mdctx;   /* the hash */
   int signing;      /* our current signing/verifying state */
   int in_headers;   /* true if we're still processing headers */
   char *header;     /* points to a malloc'ed block for header. */
@@ -503,7 +503,7 @@
     return NULL;
   }
   dk->canon = canon; /* TC13-simple, TC13-nofws */
-  EVP_SignInit(&dk->mdctx, dklib->md);
+  EVP_SignInit(dk->mdctx, dklib->md);
 
   if (statp)
   {
@@ -541,7 +541,7 @@
     }
     return NULL;
   }
-  EVP_VerifyInit(&dk->mdctx, dklib->md);
+  EVP_VerifyInit(dk->mdctx, dklib->md);
 
   if (statp)
   {
@@ -928,14 +928,14 @@
     {
 
 #ifndef DK_HASH_BUFF
-      EVP_DigestUpdate(&dk->mdctx, "\r\n", 2);
+      EVP_DigestUpdate(dk->mdctx, "\r\n", 2);
 #else
       /* buffer hack */
       dk->hash_buff[dk->hash_buff_len++] = '\r';
       dk->hash_buff[dk->hash_buff_len++] = '\n';
       if (dk->hash_buff_len >= (DK_BLOCK - 1))
       {
-        EVP_DigestUpdate(&dk->mdctx, dk->hash_buff, dk->hash_buff_len);
+        EVP_DigestUpdate(dk->mdctx, dk->hash_buff, dk->hash_buff_len);
         dk->hash_buff_len = 0;
       }
       /* buffer hack */
@@ -955,13 +955,13 @@
       if (dk->canon == DK_CANON_SIMPLE)//if nofws we ignore \r
       {
 #ifndef DK_HASH_BUFF
-        EVP_DigestUpdate(&dk->mdctx, "\r", 1);
+        EVP_DigestUpdate(dk->mdctx, "\r", 1);
 #else
         /* buffer hack */
         dk->hash_buff[dk->hash_buff_len++] = '\r';
         if (dk->hash_buff_len >= (DK_BLOCK - 1))
         {
-          EVP_DigestUpdate(&dk->mdctx, dk->hash_buff, dk->hash_buff_len);
+          EVP_DigestUpdate(dk->mdctx, dk->hash_buff, dk->hash_buff_len);
           dk->hash_buff_len = 0;
         }
         /* buffer hack */
@@ -977,13 +977,13 @@
       dk->state --;
     }
 #ifndef DK_HASH_BUFF
-    EVP_DigestUpdate(&dk->mdctx, ptr, 1);
+    EVP_DigestUpdate(dk->mdctx, ptr, 1);
 #else
     /* buffer hack */
     dk->hash_buff[dk->hash_buff_len++] = *ptr;
     if (dk->hash_buff_len >= (DK_BLOCK - 1))
     {
-      EVP_DigestUpdate(&dk->mdctx, dk->hash_buff, dk->hash_buff_len);
+      EVP_DigestUpdate(dk->mdctx, dk->hash_buff, dk->hash_buff_len);
       dk->hash_buff_len = 0;
     }
     /* buffer hack */
@@ -1746,10 +1746,10 @@
     //clean out hash buffer
     dk->hash_buff[dk->hash_buff_len++] = '\r';
     dk->hash_buff[dk->hash_buff_len++] = '\n';
-    EVP_DigestUpdate(&dk->mdctx, dk->hash_buff, dk->hash_buff_len);
+    EVP_DigestUpdate(dk->mdctx, dk->hash_buff, dk->hash_buff_len);
     dk->hash_buff_len = 0;
 #else
-    EVP_DigestUpdate(&dk->mdctx, "\r\n", 2);
+    EVP_DigestUpdate(dk->mdctx, "\r\n", 2);
 #endif
 #ifdef DK_DEBUG
     fprintf(stderr,"\r\n");
@@ -1949,7 +1949,7 @@
       }
 
       /* using that key, verify that the digest is properly signed */
-      i = EVP_VerifyFinal(&dk->mdctx, md_value, md_len, publickey);
+      i = EVP_VerifyFinal(dk->mdctx, md_value, md_len, publickey);
 
       if (i > 0)
       {
@@ -2058,7 +2058,7 @@
 
       siglen = EVP_PKEY_size(pkey);
       sig = (unsigned char*) OPENSSL_malloc(siglen);
-      EVP_SignFinal(&dk->mdctx, sig, &siglen, pkey);
+      EVP_SignFinal(dk->mdctx, sig, &siglen, pkey);
       EVP_PKEY_free(pkey);
 
       bio = BIO_new(BIO_s_mem());
@@ -2152,7 +2152,7 @@
 #ifdef DK_HASH_BUFF
   DK_MFREE(dk->hash_buff);
 #endif
-  EVP_MD_CTX_cleanup(&dk->mdctx);
+  EVP_MD_CTX_destroy(dk->mdctx);
   DK_MFREE(dk->header);   /* alloc'ing dk->header is not optional. */
   dk->dkmarker = ~DKMARK;
   DK_MFREE(dk);
